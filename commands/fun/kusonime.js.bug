const Discord = require("discord.js");
const { Client, Collection, MessageEmbed } = require(`discord.js`);
const config = require("../../botconfig/config.json");
var ee = require("../../botconfig/embed.json");
const settings = require("../../botconfig/settings.json");
const axios = require('axios');

module.exports = {
    name: "kusonime", //the command name for execution & for helpcmd [OPTIONAL]
    category: "fun", //the command category for helpcmd [OPTIONAL]
    aliases: ["kuso", "batch"], //the command aliases for helpcmd [OPTIONAL]
    cooldown: 5, //the command cooldown for execution & for helpcmd [OPTIONAL]
    usage: "kusonime [args]", //the command usage for helpcmd [OPTIONAL]
    description: "Download anime batch subtitle indonesia from kusonime without ads.", //the command description for helpcmd [OPTIONAL]
    memberpermissions: [], //Only allow members with specific Permissions to execute a Commmand [OPTIONAL]
    requiredroles: [], //Only allow specific Users with a Role to execute a Command [OPTIONAL]
    alloweduserids: [], //Only allow specific Users to execute a Command [OPTIONAL]
    minargs: 0, // minimum args for the message, 0 == none [OPTIONAL]
    maxargs: 0, // maximum args for the message, 0 == none [OPTIONAL]
    minplusargs: 0, // minimum args for the message, splitted with "++" , 0 == none [OPTIONAL]
    maxplusargs: 0, // maximum args for the message, splitted with "++" , 0 == none [OPTIONAL]
    argsmissing_message: "", //Message if the user has not enough args / not enough plus args, which will be sent, leave emtpy / dont add, if you wanna use command.usage or the default message! [OPTIONAL]
    argstoomany_message: "", //Message if the user has too many / not enough args / too many plus args, which will be sent, leave emtpy / dont add, if you wanna use command.usage or the default message! [OPTIONAL]
    run: async (client, message, args, plusArgs, cmdUser, text, prefix) => {
        if (args.length == 0) return message.channel.send("Please input anime name!");
        const carianime = args.slice().join(' ');
        axios.get(`https://kusonimeapi.herokuapp.com/api/cari/${carianime}`)
          .then((res) => {
            if (message.content.startsWith(config.prefix + 'kusonime' && config.prefix + 'kuso')) {
              const numbers = res.data;
              const length = numbers.length;
              let text = '';
              for (let i = 0; i < length; i++) {
                text += `${i + 1}. ${res.data[i].title} \n`;
              }
              message.channel.send(`Please select one of these result :\r\n${text}`);
              const filter = (message) => !message.author.bot;
      
              const options = {
                max: 2,
                maxProcessed: 1,
                time: 15000
              };
              const collector = message.channel.createMessageCollector(filter, options);
      
              collector.on('end', (collected, reason) => {
                if (reason === 'time') {
                  message.reply('Ran out of time...');
                } else {
      
                  if (collected.array()[0].content <= length) {
                    const namaanime = collected.array()[0].content - 1;
                    axios.get(`https://kusonimeapi.herokuapp.com/api/anime/${res.data[namaanime].link.endpoint}`)
                      .then(async (awww) => {
                        console.log('=======> KUSONIME API RESULT');
                        console.log(awww.data);
                        console.log('=======> SENDING RESULT TO DISCORD');
                         // credit to izzaldin
                        // let download_list = jsondata["list_download"].map((x) => x[1].filter((v) => v["resolusi"] == "720p" || v["resolusi"] == "1080p"));
                        let text = '';
                        awww.data.list_download.forEach(el => {
                          text += ``;
                          el[1].forEach(ell => {
                             // credit to kiki-af
                            // if (ell.resolusi === "720p" || ell.resolusi === "1080p") {
                            if (ell.resolusi === "720p") {
                              text += `\r\n${ell.resolusi}\r\n`
                              ell.link_download.forEach(elll => {
                                text += ` [${elll.platform}](${elll.link}) `
      
                              })
                            }
                          })
                          text += `\r\n\r\n`
                        });
                        console.log(`${text}`)
                        let genre = '';
                        awww.data.genre.forEach(al => {
                          genre += `[${al.name}](${al.url}),`;
                        });
                        const kusoEmbed = new MessageEmbed();
                        kusoEmbed.setColor(ee.color);
                        kusoEmbed.setTitle(`${awww.data.title}`);
                        kusoEmbed.setImage(awww.data.thumbnail);
                        kusoEmbed.addField('Type', awww.data.type, true);
                        kusoEmbed.addField('Status', awww.data.status, true);
                        kusoEmbed.addField('Total Eps', awww.data.total_eps, true);
                        kusoEmbed.addField('Score', awww.data.score, true);
                        kusoEmbed.addField('Durasi', awww.data.durasi, true);
                        kusoEmbed.addField('Release', awww.data.release, true);
                        kusoEmbed.addField('Genre', genre, false);
                        kusoEmbed.addField('Sinopsis', awww.data.sinopsis, false);
                        kusoEmbed.addField('Download Link', `${text}`, false);
                        kusoEmbed.setFooter(ee.footertext, ee.footericon);
                        message.channel.send(kusoEmbed);
                      })
                      .catch((errrr) => {
                        console.log(errrr)
                        message.reply('Something error.');
                      })
                  } else if (collected.array()[0].content >= length) {
                    message.reply('Please choose number from the result.');
                  } else {
                    message.reply('Please choose number from the result.');
                  }
                }
              });
            }
          })
          .catch((err) => {
            console.log(err);
          });
}
}